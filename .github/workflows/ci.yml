name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test_and_sonar:
    name: Tests + Coverage + Sonar
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests with coverage (lcov)
      run: npm run coverage:ci:normalized

    - name: Check coverage threshold
      run: |
        COVERAGE=$(node -e "
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
          const lines = coverage.total.lines.pct;
          const statements = coverage.total.statements.pct;
          const functions = coverage.total.functions.pct;
          const branches = coverage.total.branches.pct;
          const avg = (lines + statements + functions + branches) / 4;
          console.log(avg.toFixed(2));
        ")
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
          echo "✅ Coverage is above 80% ($COVERAGE%)"
        else
          echo "❌ Coverage is below 80% ($COVERAGE%)"
          exit 1
        fi

    - name: Sonar Quality Scan
      if: >-
        github.ref == 'refs/heads/main' ||
        (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
      uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          "-Dsonar.qualitygate.wait=true"

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test_and_sonar

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/